/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pactia.co.active.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.pactia.co.active.model.BusinessAsset;
import com.pactia.co.active.model.BusinessAssetModel;
import com.pactia.co.active.model.BusinessAssetSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BusinessAsset service. Represents a row in the &quot;ps_BusinessAsset&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BusinessAssetModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusinessAssetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BusinessAssetImpl
 * @generated
 */
@JSON(strict = true)
public class BusinessAssetModelImpl
	extends BaseModelImpl<BusinessAsset> implements BusinessAssetModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a business asset model instance should use the <code>BusinessAsset</code> interface instead.
	 */
	public static final String TABLE_NAME = "ps_BusinessAsset";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"businessAssetId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"assetCode", Types.VARCHAR}, {"assetName", Types.VARCHAR},
		{"assetAddress", Types.VARCHAR}, {"squareMeterValue", Types.DOUBLE},
		{"internalCode", Types.VARCHAR}, {"markerMap", Types.BIGINT},
		{"description", Types.VARCHAR}, {"logo", Types.BIGINT},
		{"latitude", Types.DOUBLE}, {"longitude", Types.DOUBLE},
		{"cityId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessAssetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assetCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("squareMeterValue", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("internalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markerMap", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("logo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("latitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("longitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("cityId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ps_BusinessAsset (uuid_ VARCHAR(75) null,businessAssetId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assetCode VARCHAR(75) null,assetName VARCHAR(75) null,assetAddress VARCHAR(75) null,squareMeterValue DOUBLE,internalCode VARCHAR(75) null,markerMap LONG,description STRING null,logo LONG,latitude DOUBLE,longitude DOUBLE,cityId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ps_BusinessAsset";

	public static final String ORDER_BY_JPQL =
		" ORDER BY businessAsset.businessAssetId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ps_BusinessAsset.businessAssetId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ASSETCODE_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long BUSINESSASSETID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BusinessAsset toModel(BusinessAssetSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BusinessAsset model = new BusinessAssetImpl();

		model.setUuid(soapModel.getUuid());
		model.setBusinessAssetId(soapModel.getBusinessAssetId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAssetCode(soapModel.getAssetCode());
		model.setAssetName(soapModel.getAssetName());
		model.setAssetAddress(soapModel.getAssetAddress());
		model.setSquareMeterValue(soapModel.getSquareMeterValue());
		model.setInternalCode(soapModel.getInternalCode());
		model.setMarkerMap(soapModel.getMarkerMap());
		model.setDescription(soapModel.getDescription());
		model.setLogo(soapModel.getLogo());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setCityId(soapModel.getCityId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BusinessAsset> toModels(BusinessAssetSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BusinessAsset> models = new ArrayList<BusinessAsset>(
			soapModels.length);

		for (BusinessAssetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public BusinessAssetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _businessAssetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBusinessAssetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _businessAssetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BusinessAsset.class;
	}

	@Override
	public String getModelClassName() {
		return BusinessAsset.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BusinessAsset, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BusinessAsset, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BusinessAsset, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BusinessAsset)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BusinessAsset, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BusinessAsset, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BusinessAsset)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BusinessAsset, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BusinessAsset, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, BusinessAsset>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			BusinessAsset.class.getClassLoader(), BusinessAsset.class,
			ModelWrapper.class);

		try {
			Constructor<BusinessAsset> constructor =
				(Constructor<BusinessAsset>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<BusinessAsset, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BusinessAsset, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BusinessAsset, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<BusinessAsset, Object>>();
		Map<String, BiConsumer<BusinessAsset, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BusinessAsset, ?>>();

		attributeGetterFunctions.put("uuid", BusinessAsset::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<BusinessAsset, String>)BusinessAsset::setUuid);
		attributeGetterFunctions.put(
			"businessAssetId", BusinessAsset::getBusinessAssetId);
		attributeSetterBiConsumers.put(
			"businessAssetId",
			(BiConsumer<BusinessAsset, Long>)BusinessAsset::setBusinessAssetId);
		attributeGetterFunctions.put("groupId", BusinessAsset::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<BusinessAsset, Long>)BusinessAsset::setGroupId);
		attributeGetterFunctions.put("companyId", BusinessAsset::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BusinessAsset, Long>)BusinessAsset::setCompanyId);
		attributeGetterFunctions.put("userId", BusinessAsset::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<BusinessAsset, Long>)BusinessAsset::setUserId);
		attributeGetterFunctions.put("userName", BusinessAsset::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setUserName);
		attributeGetterFunctions.put(
			"createDate", BusinessAsset::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BusinessAsset, Date>)BusinessAsset::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", BusinessAsset::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<BusinessAsset, Date>)BusinessAsset::setModifiedDate);
		attributeGetterFunctions.put("assetCode", BusinessAsset::getAssetCode);
		attributeSetterBiConsumers.put(
			"assetCode",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setAssetCode);
		attributeGetterFunctions.put("assetName", BusinessAsset::getAssetName);
		attributeSetterBiConsumers.put(
			"assetName",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setAssetName);
		attributeGetterFunctions.put(
			"assetAddress", BusinessAsset::getAssetAddress);
		attributeSetterBiConsumers.put(
			"assetAddress",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setAssetAddress);
		attributeGetterFunctions.put(
			"squareMeterValue", BusinessAsset::getSquareMeterValue);
		attributeSetterBiConsumers.put(
			"squareMeterValue",
			(BiConsumer<BusinessAsset, Double>)
				BusinessAsset::setSquareMeterValue);
		attributeGetterFunctions.put(
			"internalCode", BusinessAsset::getInternalCode);
		attributeSetterBiConsumers.put(
			"internalCode",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setInternalCode);
		attributeGetterFunctions.put("markerMap", BusinessAsset::getMarkerMap);
		attributeSetterBiConsumers.put(
			"markerMap",
			(BiConsumer<BusinessAsset, Long>)BusinessAsset::setMarkerMap);
		attributeGetterFunctions.put(
			"description", BusinessAsset::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setDescription);
		attributeGetterFunctions.put("logo", BusinessAsset::getLogo);
		attributeSetterBiConsumers.put(
			"logo", (BiConsumer<BusinessAsset, Long>)BusinessAsset::setLogo);
		attributeGetterFunctions.put("latitude", BusinessAsset::getLatitude);
		attributeSetterBiConsumers.put(
			"latitude",
			(BiConsumer<BusinessAsset, Double>)BusinessAsset::setLatitude);
		attributeGetterFunctions.put("longitude", BusinessAsset::getLongitude);
		attributeSetterBiConsumers.put(
			"longitude",
			(BiConsumer<BusinessAsset, Double>)BusinessAsset::setLongitude);
		attributeGetterFunctions.put("cityId", BusinessAsset::getCityId);
		attributeSetterBiConsumers.put(
			"cityId",
			(BiConsumer<BusinessAsset, String>)BusinessAsset::setCityId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBusinessAssetId() {
		return _businessAssetId;
	}

	@Override
	public void setBusinessAssetId(long businessAssetId) {
		_businessAssetId = businessAssetId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAssetCode() {
		if (_assetCode == null) {
			return "";
		}
		else {
			return _assetCode;
		}
	}

	@Override
	public void setAssetCode(String assetCode) {
		_columnBitmask |= ASSETCODE_COLUMN_BITMASK;

		if (_originalAssetCode == null) {
			_originalAssetCode = _assetCode;
		}

		_assetCode = assetCode;
	}

	public String getOriginalAssetCode() {
		return GetterUtil.getString(_originalAssetCode);
	}

	@JSON
	@Override
	public String getAssetName() {
		if (_assetName == null) {
			return "";
		}
		else {
			return _assetName;
		}
	}

	@Override
	public void setAssetName(String assetName) {
		_assetName = assetName;
	}

	@JSON
	@Override
	public String getAssetAddress() {
		if (_assetAddress == null) {
			return "";
		}
		else {
			return _assetAddress;
		}
	}

	@Override
	public void setAssetAddress(String assetAddress) {
		_assetAddress = assetAddress;
	}

	@JSON
	@Override
	public double getSquareMeterValue() {
		return _squareMeterValue;
	}

	@Override
	public void setSquareMeterValue(double squareMeterValue) {
		_squareMeterValue = squareMeterValue;
	}

	@JSON
	@Override
	public String getInternalCode() {
		if (_internalCode == null) {
			return "";
		}
		else {
			return _internalCode;
		}
	}

	@Override
	public void setInternalCode(String internalCode) {
		_internalCode = internalCode;
	}

	@JSON
	@Override
	public long getMarkerMap() {
		return _markerMap;
	}

	@Override
	public void setMarkerMap(long markerMap) {
		_markerMap = markerMap;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getLogo() {
		return _logo;
	}

	@Override
	public void setLogo(long logo) {
		_logo = logo;
	}

	@JSON
	@Override
	public double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(double latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(double longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public String getCityId() {
		if (_cityId == null) {
			return "";
		}
		else {
			return _cityId;
		}
	}

	@Override
	public void setCityId(String cityId) {
		_cityId = cityId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(BusinessAsset.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BusinessAsset.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			BusinessAsset.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public BusinessAsset toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BusinessAsset>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BusinessAssetImpl businessAssetImpl = new BusinessAssetImpl();

		businessAssetImpl.setUuid(getUuid());
		businessAssetImpl.setBusinessAssetId(getBusinessAssetId());
		businessAssetImpl.setGroupId(getGroupId());
		businessAssetImpl.setCompanyId(getCompanyId());
		businessAssetImpl.setUserId(getUserId());
		businessAssetImpl.setUserName(getUserName());
		businessAssetImpl.setCreateDate(getCreateDate());
		businessAssetImpl.setModifiedDate(getModifiedDate());
		businessAssetImpl.setAssetCode(getAssetCode());
		businessAssetImpl.setAssetName(getAssetName());
		businessAssetImpl.setAssetAddress(getAssetAddress());
		businessAssetImpl.setSquareMeterValue(getSquareMeterValue());
		businessAssetImpl.setInternalCode(getInternalCode());
		businessAssetImpl.setMarkerMap(getMarkerMap());
		businessAssetImpl.setDescription(getDescription());
		businessAssetImpl.setLogo(getLogo());
		businessAssetImpl.setLatitude(getLatitude());
		businessAssetImpl.setLongitude(getLongitude());
		businessAssetImpl.setCityId(getCityId());

		businessAssetImpl.resetOriginalValues();

		return businessAssetImpl;
	}

	@Override
	public int compareTo(BusinessAsset businessAsset) {
		long primaryKey = businessAsset.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BusinessAsset)) {
			return false;
		}

		BusinessAsset businessAsset = (BusinessAsset)obj;

		long primaryKey = businessAsset.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		BusinessAssetModelImpl businessAssetModelImpl = this;

		businessAssetModelImpl._originalUuid = businessAssetModelImpl._uuid;

		businessAssetModelImpl._originalGroupId =
			businessAssetModelImpl._groupId;

		businessAssetModelImpl._setOriginalGroupId = false;

		businessAssetModelImpl._originalCompanyId =
			businessAssetModelImpl._companyId;

		businessAssetModelImpl._setOriginalCompanyId = false;

		businessAssetModelImpl._originalUserId = businessAssetModelImpl._userId;

		businessAssetModelImpl._setOriginalUserId = false;

		businessAssetModelImpl._setModifiedDate = false;

		businessAssetModelImpl._originalAssetCode =
			businessAssetModelImpl._assetCode;

		businessAssetModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BusinessAsset> toCacheModel() {
		BusinessAssetCacheModel businessAssetCacheModel =
			new BusinessAssetCacheModel();

		businessAssetCacheModel.uuid = getUuid();

		String uuid = businessAssetCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			businessAssetCacheModel.uuid = null;
		}

		businessAssetCacheModel.businessAssetId = getBusinessAssetId();

		businessAssetCacheModel.groupId = getGroupId();

		businessAssetCacheModel.companyId = getCompanyId();

		businessAssetCacheModel.userId = getUserId();

		businessAssetCacheModel.userName = getUserName();

		String userName = businessAssetCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			businessAssetCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			businessAssetCacheModel.createDate = createDate.getTime();
		}
		else {
			businessAssetCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			businessAssetCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			businessAssetCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		businessAssetCacheModel.assetCode = getAssetCode();

		String assetCode = businessAssetCacheModel.assetCode;

		if ((assetCode != null) && (assetCode.length() == 0)) {
			businessAssetCacheModel.assetCode = null;
		}

		businessAssetCacheModel.assetName = getAssetName();

		String assetName = businessAssetCacheModel.assetName;

		if ((assetName != null) && (assetName.length() == 0)) {
			businessAssetCacheModel.assetName = null;
		}

		businessAssetCacheModel.assetAddress = getAssetAddress();

		String assetAddress = businessAssetCacheModel.assetAddress;

		if ((assetAddress != null) && (assetAddress.length() == 0)) {
			businessAssetCacheModel.assetAddress = null;
		}

		businessAssetCacheModel.squareMeterValue = getSquareMeterValue();

		businessAssetCacheModel.internalCode = getInternalCode();

		String internalCode = businessAssetCacheModel.internalCode;

		if ((internalCode != null) && (internalCode.length() == 0)) {
			businessAssetCacheModel.internalCode = null;
		}

		businessAssetCacheModel.markerMap = getMarkerMap();

		businessAssetCacheModel.description = getDescription();

		String description = businessAssetCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			businessAssetCacheModel.description = null;
		}

		businessAssetCacheModel.logo = getLogo();

		businessAssetCacheModel.latitude = getLatitude();

		businessAssetCacheModel.longitude = getLongitude();

		businessAssetCacheModel.cityId = getCityId();

		String cityId = businessAssetCacheModel.cityId;

		if ((cityId != null) && (cityId.length() == 0)) {
			businessAssetCacheModel.cityId = null;
		}

		return businessAssetCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BusinessAsset, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BusinessAsset, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BusinessAsset, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BusinessAsset)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BusinessAsset, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BusinessAsset, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BusinessAsset, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BusinessAsset)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BusinessAsset>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _businessAssetId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _assetCode;
	private String _originalAssetCode;
	private String _assetName;
	private String _assetAddress;
	private double _squareMeterValue;
	private String _internalCode;
	private long _markerMap;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _logo;
	private double _latitude;
	private double _longitude;
	private String _cityId;
	private long _columnBitmask;
	private BusinessAsset _escapedModel;

}